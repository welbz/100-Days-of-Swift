{\rtf1\ansi\ansicpg1252\cocoartf2569
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red33\green33\blue33;}
{\*\expandedcolortbl;;\cssrgb\c17255\c17255\c17255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl432\sa200\partightenfactor0
\ls1\ilvl0
\f0\fs26\fsmilli13200 \cf2 \expnd0\expndtw0\kerning0
{\listtext	\uc0\u8226 	}The\'a0categoryBitMask\'a0property is a number defining the type of object this is for considering collisions.\
{\listtext	\uc0\u8226 	}The\'a0collisionBitMask\'a0property is a number defining what categories of object this node should collide with,\
{\listtext	\uc0\u8226 	}The\'a0contactTestBitMask\'a0property is a number defining which collisions we want to be notified about.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl432\sa200\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \
They all do very different things, although the distinction might seem fine before you fully understand. Category is simple enough: every node you want to reference in your collision bitmasks or your contact test bitmasks must have a category attached. If you give a node a collision bitmask but not a contact test bitmask, it means they will bounce off each other but you won't be notified. If you do the opposite (contact test but not collision) it means they won't bounce off each other but you will be told when they overlap.\
By default, physics bodies have a collision bitmask that means "everything", so everything bounces off everything else. By default, they also have a contact test bitmask that means "nothing", so you'll never get told about collisions.\
A bitmask is a complicated beast to explain, but what it means in practice is that you can combine values together. In our game, vortexes, stars and the finish flag all have the player set for their contact test bitmask, and the player has star and vortex and finish flag.\
SpriteKit expects these three bitmasks to be described using a UInt32. It's a particular way of storing numbers, but rather than using numbers we're going to use enums with a raw value. This means we can refer to the various options using names.\expnd0\expndtw0\kerning0
\
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0
\ls1\ilvl0\cf2 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl432\sa200\partightenfactor0
\ls1\ilvl0\cf2 Video 3\
override func update\
 The last thing to do is to poll the motion manager inside our update() method, checking to see what the current tilt data is. But there's a complication: we already have a hack in there that lets us test in the simulator, so we want one set of code for the simulator and one set of code for devices.\
\
 Swift solves this problem by adding special compiler instructions. If the instruction evaluates to true it will compile one set of code, otherwise it will compile the other. This is particularly helpful once you realize that any code wrapped in compiler instructions that evaluate to false never get seen \'96 it's like they never existed. So, this is a great way to include debug information or activity in the simulator that never sees the light on devices.\
\
 The compiler directives we care about are: #if targetEnvironment(simulator), #else and #endif. As you can see, this is mostly the same as a standard Swift if/else block, although here you don't need braces because everything until the #else or #endif will execute.\
 \
 The first line safely unwraps the optional accelerometer data, because there might not be any available. The second line changes the gravity of our game world so that it reflects the accelerometer data. You're welcome to adjust the speed multipliers as you please; I found a value of 50 worked well.\
\
 Note that I passed accelerometer Y to CGVector's X and accelerometer X to CGVector's Y. This is not a typo! Remember, your device is rotated to landscape right now, which means you also need to flip your coordinates around.\
\
 We need to put that code inside the current update() method, wrapped inside the new compiler directives\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl432\sa200\partightenfactor0
\ls1\ilvl0\cf2 Video 3 - playerCollision\
There are three types of collision we care about: when the player hits a vortex they should be penalized, when the player hits a star they should score a point, and when the player hits the finish flag the next level should be loaded. I'll deal with the first two here, and you can think about the third one yourself!\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl432\sa200\partightenfactor0
\ls1\ilvl0\cf2 \
     When a player hits a vortex, a few things need to happen. Chief among them is that we need to stop the player controlling the ball, which will be done using a single boolean property called isGameOver\
\
\
Video 3 - Collisions with Vortex\
\
A number of other things need to be done when a player collides with a vortex:\
{\listtext	\uc0\u8226 	}We need to stop the ball from being a dynamic physics body so that it stops moving once it's sucked in.\
{\listtext	\uc0\u8226 	}We need to move the ball over the vortex, to simulate it being sucked in. It will also be scaled down at the same time.\
{\listtext	\uc0\u8226 	}Once the move and scale has completed, we need to remove the ball from the game.\
{\listtext	\uc0\u8226 	}After all the actions complete, we need to create the player ball again and re-enable control.\
We'll put that together using an\'a0SKAction\'a0sequence, followed by a trailing closure that will execute when the actions finish. When colliding with a star, we just remove the star node from the scene and add one to the score.\
\
}