{\rtf1\ansi\ansicpg1252\cocoartf2569
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 Tags and cellForItemAt
\f1\b0 \
\
Set the tag of the image view to be 1000, and here's why: all UIView subclasses have a method called viewWithTag(), which searches for any views inside itself (or indeed itself) with that tag number. We can find our image view just by using this method, although I'll still use if let and a conditional typecast to be sure. cellForItemAt\
\
\
\

\f0\b Multipeer connectivity
\f1\b0 \
\
Multipeer connectivity requires four new classes:\
MCSession is the manager class that handles all multipeer connectivity for us.\
MCPeerID identifies each user uniquely in a session.\
MCAdvertiserAssistant is used when creating a session, telling others that we exist and handling invitations.\
MCBrowserViewController is used when looking for sessions, showing users who is nearby and letting them join.\
\
We use all four of them in our app, but only three need to be properties.\
\
\
\
// 7\
Depending on what users select in our alert controller, we need to call one of two methods:\'a0startHosting()\'a0or\'a0joinSession(). Because both of these are coming from the result of a\'a0UIAction\'a0being tapped, both methods must accept a\'a0UIAlertAction\'a0as their only parameter.\
\
Before I show you the code to get multipeer connectivity up and running, I want to go over what they will do. Most important of all is that all multipeer services on iOS must declare a service type, which is a 15-digit string that uniquely identify your service. Those 15 digits can contain only the letters A-Z, numbers and hyphens, and it's usually preferred to include your company in there somehow.\
\
Apple's example is, "a text chat app made by ABC company could use the service type\'a0abc-txtchat"; for this project I'll be using\'a0hws-project25.\
\
This service type is used by both\'a0MCAdvertiserAssistant\'a0and\'a0MCBrowserViewController\'a0to make sure your users only see other users of the same app. They both also want a reference to your\'a0MCSession\'a0instance so they can take care of connections for you.\
\
\
\
\
// 10 - session(_:didReceive:fromPeer:)\
when we add a picture to the collection view it is shown on our screen but doesn't go anywhere. We're going to add some code to the image picker's didFinishPickingMediaWithInfo method so that when an image is added it also gets sent out to peers.\
\
Sending images across a multipeer connection is remarkably easy. In project 10 we used the function jpegData() to convert a UIImage object into a Data so it can be saved to disk, and here we\'92ll be using pngData() that does the same thing with the PNG image format. Once we have that, MCSession objects have a sendData() method that will ensure that data gets transmitted reliably to your peers.\
\
Once the data arrives at each peer, the method session(_:didReceive:fromPeer:) will get called with that data, at which point we can create a UIImage from it and add it to our images array. There is one catch: when you receive data it might not be on the main thread\
\
\
\
// 11\
Take note of the call to async() to ensure we definitely only manipulate the user interface on the main thread!\
\
The final piece of code to finish up this whole project is the bit that sends image data to peers. This is so easy you might not even believe me. In fact, the code is only as long as it is because there's some error checking in there.\
\
This final code needs to:\
1) Check if we have an active session we can use.\
2) Check if there are any peers to send to.\
3) Convert the new image to a Data object.\
4) Send it to all peers, ensuring it gets delivered.\
5) Show an error message if there's a problem.}